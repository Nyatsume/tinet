docker run -td --net none --name R0 --rm --privileged --hostname R0 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.default.disable_ipv6=0 --sysctl net.ipv4.ip_forward=1 -v /tmp/tinet:/tinet --entrypoint bash frrouting/frr:v8.1.0 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect R0 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/R0 > /dev/null
docker run -td --net none --name R1 --rm --privileged --hostname R1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.default.disable_ipv6=0 --sysctl net.ipv4.ip_forward=1 -v /tmp/tinet:/tinet --entrypoint bash frrouting/frr:v8.1.0 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect R1 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/R1 > /dev/null
docker run -td --net none --name R2 --rm --privileged --hostname R2 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.default.disable_ipv6=0 --sysctl net.ipv4.ip_forward=1 -v /tmp/tinet:/tinet --entrypoint bash frrouting/frr:v8.1.0 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect R2 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/R2 > /dev/null
docker run -td --net none --name R3 --rm --privileged --hostname R3 --sysctl net.ipv6.conf.all.disable_ipv6=0 --sysctl net.ipv6.conf.default.disable_ipv6=0 --sysctl net.ipv4.ip_forward=1 -v /tmp/tinet:/tinet --entrypoint bash frrouting/frr:v8.1.0 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect R3 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/R3 > /dev/null
docker run -td --net none --name C0 --rm --privileged --hostname C0 -v /tmp/tinet:/tinet slankdev/ubuntu:18.04 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect C0 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/C0 > /dev/null
docker run -td --net none --name C1 --rm --privileged --hostname C1 -v /tmp/tinet:/tinet slankdev/ubuntu:18.04 > /dev/null
mkdir -p /var/run/netns > /dev/null
PID=`docker inspect C1 --format '{{.State.Pid}}'` > /dev/null
ln -s /proc/$PID/ns/net /var/run/netns/C1 > /dev/null
ip link add net0 netns R0 type veth peer name net0 netns R1 > /dev/null
ip netns exec R0 ip link set net0 up > /dev/null
ip netns exec R1 ip link set net0 up > /dev/null
ip link add net1 netns R0 type veth peer name net0 netns R2 > /dev/null
ip netns exec R0 ip link set net1 up > /dev/null
ip netns exec R2 ip link set net0 up > /dev/null
ip link add net1 netns R1 type veth peer name net0 netns R3 > /dev/null
ip netns exec R1 ip link set net1 up > /dev/null
ip netns exec R3 ip link set net0 up > /dev/null
ip link add net1 netns R2 type veth peer name net0 netns C0 > /dev/null
ip netns exec R2 ip link set net1 up > /dev/null
ip netns exec C0 ip link set net0 up > /dev/null
ip link add net1 netns R3 type veth peer name net0 netns C1 > /dev/null
ip netns exec R3 ip link set net1 up > /dev/null
ip netns exec C1 ip link set net0 up > /dev/null
R1:net1<->R3:net0
R3:net0<->R0:net1

